package{	import code.colorData;	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.Timer;	import flash.text.*;	import flash.ui.Mouse;	import code.circleSpawner;	import code.lineSpawner;	import code.SliderUI;			public class circleGenerator extends MovieClip	{		//Public		public var Circle:circleSpawner;  //Circle Class		public var Line:lineSpawner; //Line Class		public var circleSpawnLimit:int = 15;  //How Many Circles On Screen at One Time		public var spawnCounter:int = 0;		public var generateTime:Number = 5;  //Time Betweeen Circle Generations		public var removeTime:Number = 15; //Time Between Removal of Circles		//Circle Vars		public var circleMax:Number = 25;		public var circleMin:Number = 2;		public var circleAlpha:Number = .1;		//Line Vars		public var lineSizeMax:Number = 4.5;		public var lineSizeMin:Number = 1;		public var lineIncrease:Number = .25;						public var distanceSpread:Number = 25;		public var isSpawnLines:Boolean = true;		public var isSpawnCircles:Boolean = true;								//Private		private var generateTimer:Timer = new Timer(generateTime); //How Quickly the Circles Generate		private var removalTimer:Timer = new Timer(removeTime, 1);		private var totalArrayLength:Number;				private var oldPlacementPoint:Point = new Point(0,0);		private var placementPoint:Point = new Point(0,0);		private var lineGoToPoint:Point = new Point(0,0);		private var lineGoFromPoint:Point = new Point(0,0);				private var circleArray:Array = new Array();		private var lineArray:Array = new Array();		private var staticColorID:int;		//Mouse Distance		private var mouseDistance:Number;  //Distance between Old Position & New		private var isClose:Boolean; //If Mouse is Close to last Position		private var isPlaceCounter:Boolean = true;		private var isSpaceDown:Boolean;						//Background		private var backgroundMC:MovieClip = new MovieClip();		private var bgAlpha:Number = .17;						//Color Arrays			//Private Colors			private	var wonderLandTheme:Array = new Array(0x2DB39E, 0x416C73, 0x79DCF4, 0x434A59, 0x302838);			private var dustyPetrolTheme:Array = new Array (0x292929, 0x5B7876, 0x8F9E8B, 0xF2E6B6, 0x412A22);			private var creativeInfluenceTheme:Array = new Array(0xFF0000, 0xFF950B, 0x2FA88C, 0xDEEB00, 0x4B2C04);			private var page50Theme:Array = new Array(0xBF2431, 0x183459, 0x3671BF, 0x8EA66A, 0xA0A676);			private var eightiesVibrantTheme:Array = new Array (0xC0D100, 0x6BB855, 0xFF1BA3, 0xD9C50C, 0xD13300);			private var mountainSkyTheme:Array = new Array (0x023E73, 0x034C8C, 0x4E94BF, 0xCCDCF3, 0xEEF2FD);			private var duoITheme:Array = new Array (0x413050, 0x255F75, 0x454D38,0x111111, 0xC4C1BA);			private var dullTheme:Array = new Array (0xFFD74D, 0xFFC600, 0xAD100D, 0x004D80, 0x8A9E50);							private var parkAvenueShift:Array = new Array (0x69E8CC, 0xFFF5BC, 0x302D23, 0x6B4424, 0xB9E04B);			private var haitiRelief:Array = new Array (0x32450C, 0x717400, 0xDC8505, 0xEC5519, 0xBE2805);			private var	dropOfSun:Array = new Array (0x1F4E57, 0x438275, 0xC0EB94, 0xFFFF8BFFFF8B, 0x98EDB0);			private var bordeaux:Array = new Array (0xF7F2B2, 0xADCF4F, 0x84815B, 0x4A1A2C, 0x8E3557);			private var oddEnd:Array = new Array (0x000000, 0x333333, 0xFF358B, 0x01B0F0, 0xAEEE00);			private var techOffice:Array = new Array (0x595241, 0xB8AE9C, 0xFFFFFF, 0xACCFCC, 0x8A0917);			private var herbsAndSpices:Array = new Array (0x5A1F00, 0xD1570D, 0xFDE792, 0x477725, 0xA9CC66);			private var orangeOnOlive:Array = new Array (0xB4AF91, 0x787746, 0x40411E, 0x32331D, 0xC03000);			private var orangeOnBlue:Array = new Array (0xFFF8E3, 0xCCCC9F, 0x33332D, 0x9FB4CC, 0xDB4105);			private var webLight:Array = new Array (0x42B8CC, 0x7E9599, 0xB2E06B, 0xFF8B45, 0xF5C7C7);			private var lr:Array = new Array (0xBF1400, 0xBFAF0A, 0xFFE90D, 0x403A03, 0xE64400);			private var vitruvianMan:Array = new Array (0xE22F0E, 0x32EF0E, 0x32EF0E, 0x8B03F9, 0x02ABEF);			private var groen:Array = new Array (0x4F7302, 0xABD904, 0x83A603, 0xEEF26D, 0xF0F2B3);			private var waitingForSpring:Array = new Array (0xFFC754, 0xCF8E97, 0xC47A87, 0x78B189, 0x209F88);			private var markit:Array = new Array (0x1F8601, 0xEDE72D, 0xF06700, 0xC00F05, 0x4B0102);					private var getMyTShirt:Array = new Array (0xFFFCFF, 0xE8C4A9, 0x382B29, 0xFFAD8C, 0xFF8282);			private var greenDream:Array = new Array (0x152C0C, 0x375300, 0x727C38, 0x313F17, 0x514F2C);			private var fridayFunk:Array = new Array (0x2347A3, 0xC52C27, 0x39657E, 0xE1B41B, 0x4F9316);			private var wholeFoods:Array = new Array (0x69E8CC, 0xFFF5BC, 0x302D23, 0x6B4424, 0xB9E04B);			private var chocolateChillJazz:Array = new Array (0x4D2B1F, 0x635D61, 0x7992A2, 0x97BFD5, 0xBFDCF5);			private var icelandicLagoon:Array = new Array (0xA1D5B8, 0x83ACA0, 0x565E55, 0x473D0F, 0x1F1B10);			private var oldTaxiCab:Array = new Array (0x151919, 0x733218, 0x8C7C40, 0xBFA146, 0xE5B744);			private var easterSunday:Array = new Array (0x0D050B, 0x241533, 0x6A730D, 0xE5DB00, 0xFFFFF8);			private var clueAnswer:Array = new Array (0x372F22, 0x8A3D20, 0xF5523F, 0xFFC955, 0x540907);			private var shipBreakers:Array = new Array (0x540907, 0x5F2D0F, 0x695F3A, 0xA5AA73, 0xF5FFA5);			//Public Colors		public var backgroundColorThemeArray:Array = new Array(wholeFoods, chocolateChillJazz, icelandicLagoon, oldTaxiCab, easterSunday, clueAnswer, shipBreakers, fridayFunk, greenDream, getMyTShirt, markit, waitingForSpring, groen, vitruvianMan, orangeOnOlive, orangeOnBlue, webLight, lr, herbsAndSpices, techOffice, oddEnd, bordeaux, dropOfSun, haitiRelief, parkAvenueShift, wonderLandTheme, dustyPetrolTheme, creativeInfluenceTheme, page50Theme, eightiesVibrantTheme, mountainSkyTheme, duoITheme, dullTheme);		private var newColorID:Number;		private var colorCounter:int = 0;//Counts the Color Rotation		private var themeCounter:int = 0;//Counts the Theme Color Rotations				//Side Color Boxes		private var colorBox:MovieClip = new MovieClip();  //Holds Color Swatch		private var colorContainer:MovieClip = new MovieClip();  //Holds Actual MC's of ColorBox		private var boxArray:Array = new Array();  //Holds All Color Swatch Blocks		private var colorBoxesPlaced:Boolean; //If Color Swatch is Created		private var isDrawBoxesClicked:Boolean; //If the Boxes have been Clicked or Not?		private var themeToBe:int = 0;  //The Color Scheme to Send to Circle()										//Slider MC's		//Stage Sliders		private var spreadDistanceSlider:MovieClip = new slider_spreadDistance();		private var spreadDistanceTrack:MovieClip = new track_spreadDistance();				//Line Sliders		//Circle Sliders		private var circleMaxSlider:MovieClip = new slider_spreadDistance();		private var circleMaxTrack:MovieClip =  new track_spreadDistance();		private var circleMinSlider:MovieClip = new slider_spreadDistance();		private var circleMinTrack:MovieClip =  new track_spreadDistance();		private var circleAlphaSlider:MovieClip = new slider_spreadDistance();		private var circleAlphaTrack:MovieClip =  new track_spreadDistance();				private var lineMaxSlider:MovieClip = new slider_spreadDistance();		private var lineMaxTrack:MovieClip =  new track_spreadDistance();		private var lineMinSlider:MovieClip = new slider_spreadDistance();		private var lineMinTrack:MovieClip =  new track_spreadDistance();		private var lineIncreaseSlider:MovieClip = new slider_spreadDistance();		private var lineIncreaseTrack:MovieClip =  new track_spreadDistance();						private var spawnLimitSlider:MovieClip = new slider_spreadDistance();		private var spawnLimitTrack:MovieClip =  new track_spreadDistance();					private var limitSliderClicked:Boolean = false;		private var spreadSliderClicked:Boolean = false;		private var circleMaxSliderClicked:Boolean = false;		private var circleMinSliderClicked:Boolean = false;		private var circleAlphaSliderClicked:Boolean = false;				private var lineMaxSliderClicked:Boolean = false;		private var lineMinSliderClicked:Boolean = false;		private var lineIncreaseSliderClicked:Boolean = false;				private var spreadSlider:SliderUI; //How Far apart Each Ball is from last slider		private var totLimitSlider:SliderUI; //Limit to Circles on Stage		private var circMaxSlider:SliderUI; //Limit to Circle Max Size		private var circMinSlider:SliderUI; //Limit to Circle Min Size		private var circAlphaSlider:SliderUI; //Limit to Circle Min Size		private var linemaxSlider:SliderUI; //Limit to Circle Max Size		private var lineminSlider:SliderUI; //Limit to Circle Min Size		private var lineIncSlider:SliderUI; //Limit to Circle Min Size				private var itemTitleText:TextField = new TextField();		private var themeText:TextField = new TextField();		private	var themeTextFormat:TextFormat = new TextFormat();  		private var sliderTextFormat:TextFormat = new TextFormat();		public var blabl:colorData = new colorData();				public function circleGenerator()//Constructor		{			placementPoint = this.globalToLocal(new Point( Math.random() * (stage.stageWidth - 100) + 100, Math.random() * (stage.stageHeight-100) + 100));			oldPlacementPoint = this.globalToLocal(new Point( Math.random() * (stage.stageWidth - 100) + 100, Math.random() * (stage.stageHeight-100) + 100));;						mouseDistance = 55;						blabl.backgroundColorThemeArray				generateTimer.addEventListener(TimerEvent.TIMER, createCircle);			generateTimer.start();						stage.addEventListener(KeyboardEvent.KEY_DOWN, switchTheme);	//On CLICK change color Scheme						this.addEventListener(Event.ENTER_FRAME, sliderUpdate);			colorBoxesPlaced = false;						///////////////SLIDERS//////////////			//Spread Distance			stage.addChild(spreadDistanceTrack);			stage.addChild(spreadDistanceSlider);			spreadDistanceTrack.x = circlesText.x;			spreadDistanceTrack.y = circlesText.y + (spreadDistanceSlider.height);			spreadDistanceSlider.x = spreadDistanceTrack.x;			spreadDistanceSlider.y = spreadDistanceTrack.y;			spreadSlider = new SliderUI(stage, "x", spreadDistanceTrack, spreadDistanceSlider, 1, 200, 50);						//Circle Max			stage.addChild(circleMaxTrack);			stage.addChild(circleMaxSlider);			circleMaxTrack.x = circlesText.x;			circleMaxTrack.y = circlesText.y + (spreadDistanceSlider.height*2);			circleMaxSlider.x = circleMaxTrack.x;			circleMaxSlider.y = circleMaxTrack.y;			circMaxSlider = new SliderUI(stage, "x", circleMaxTrack, circleMaxSlider, 1, 50, 25);			//Circle Min			stage.addChild(circleMinTrack);			stage.addChild(circleMinSlider);			circleMinTrack.x = circlesText.x;			circleMinTrack.y = circlesText.y + (spreadDistanceSlider.height*3);			circleMinSlider.x = circleMinTrack.x;			circleMinSlider.y = circleMinTrack.y;			circMinSlider = new SliderUI(stage, "x", circleMinTrack, circleMinSlider, 1, 25, 1);			//Circle Alpha			stage.addChild(circleAlphaTrack);			stage.addChild(circleAlphaSlider);			circleAlphaTrack.x = circlesText.x;			circleAlphaTrack.y = circlesText.y + (spreadDistanceSlider.height*4);			circleAlphaSlider.x = circleAlphaTrack.x;			circleAlphaSlider.y = circleAlphaTrack.y;			circAlphaSlider = new SliderUI(stage, "x", circleAlphaTrack, circleAlphaSlider, 0, 1, .1);						//Line Max			stage.addChild(lineMaxTrack);			stage.addChild(lineMaxSlider);			lineMaxTrack.x = linesText.x;			lineMaxTrack.y = linesText.y + (lineMaxSlider.height);			lineMaxSlider.x = lineMaxTrack.x;			lineMaxSlider.y = lineMaxTrack.y;			linemaxSlider = new SliderUI(stage, "x", lineMaxTrack, lineMaxSlider, 0, 150, 10);			//Line Min			stage.addChild(lineMinTrack);			stage.addChild(lineMinSlider);			lineMinTrack.x = linesText.x;			lineMinTrack.y = linesText.y + (lineMaxSlider.height*2);			lineMinSlider.x = lineMinTrack.x;			lineMinSlider.y = lineMinTrack.y;			lineminSlider = new SliderUI(stage, "x", lineMinTrack, lineMinSlider, 0, 15, .1);			//Line Increase			stage.addChild(lineIncreaseTrack);			stage.addChild(lineIncreaseSlider);			lineIncreaseTrack.x = linesText.x;			lineIncreaseTrack.y = linesText.y + (lineMaxSlider.height*3);			lineIncreaseSlider.x = lineIncreaseTrack.x;			lineIncreaseSlider.y = lineIncreaseTrack.y;			lineIncSlider = new SliderUI(stage, "x", lineIncreaseTrack, lineIncreaseSlider, 0, 3, .1);						//SpawnLimit			stage.addChild(spawnLimitTrack);			stage.addChild(spawnLimitSlider);			spawnLimitTrack.x = stageText.x;			spawnLimitTrack.y = stageText.y + (spawnLimitSlider.height);			spawnLimitSlider.x = spawnLimitTrack.x;			spawnLimitSlider.y = spawnLimitTrack.y;			totLimitSlider = new SliderUI(stage, "x", spawnLimitTrack, spawnLimitSlider, 20, 150, 30);			///////////END---SLIDERS////////////						//SPAWN LIMIT SLIDER EVENT LISTENERS			spawnLimitSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			spawnLimitSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			spawnLimitSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//SREAD DISTANCE SLIDER EVENT LISTENERS			spreadDistanceSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			spreadDistanceSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			spreadDistanceSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//Circle Max & Min SLIDER EVENT LISTENERS			circleMaxSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			circleMaxSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			circleMaxSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//Min			circleMinSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			circleMinSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			circleMinSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//Circle Alpha			circleAlphaSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			circleAlphaSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			circleAlphaSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);									//Line Max & Min SLIDER EVENT LISTENERS			lineMaxSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			lineMaxSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			lineMaxSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//Min			lineMinSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			lineMinSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			lineMinSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);			//Line Frequency			lineIncreaseSlider.addEventListener(MouseEvent.MOUSE_DOWN, textDownHandler);			lineIncreaseSlider.addEventListener(MouseEvent.MOUSE_UP, textUpHandler);			lineIncreaseSlider.addEventListener(MouseEvent.MOUSE_OUT, textUpHandler);									stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);									this.addEventListener(Event.ENTER_FRAME, displayText);						this.addChild(itemTitleText); //Slider Title Text			itemTitleText = new TextField(); //Slider Title Text			//////////TEXT FORMATTING//////// 			//For TextBoxes			themeTextFormat.color = 0xD5D5D5;   			themeTextFormat.size = 24;  			themeTextFormat.align = "right";			//themeTextFormat.bold = true;  			//themeTextFormat.italic = true;  			// themeTextFormat.underline = true;			themeTextFormat.font = "Kredit";			//For Slider Boxes			sliderTextFormat.color = 0x4D4D4D;   			sliderTextFormat.size = 18;  			sliderTextFormat.align = "right";			//sliderTextFormat.bold = true;  			//sliderTextFormat.italic = true;  			//sliderTextFormat.underline = true;			sliderTextFormat.font = "Kredit";			////////////END TEXT FORMATTING//////						//themeText = new TextField(); //Color Theme Counter			//themeText.setTextFormat(themeTextFormat); //Apply Text Formatting								}//End circleGenetator		public function sliderUpdate(e:Event)		{			distanceSpread = spreadSlider.currentValue;			circleSpawnLimit = Math.round(totLimitSlider.currentValue);						//CircleVariables			circleMax = circMaxSlider.currentValue;			circleMin = circMinSlider.currentValue;			circleAlpha = circAlphaSlider.currentValue;			//LineVariables			lineSizeMax = linemaxSlider.currentValue;			lineSizeMin = lineminSlider.currentValue;			lineIncrease = lineIncSlider.currentValue;									//trace("Line Size Max Driver: ", + lineSizeMax);					}		public function textDownHandler(e:Event)		{			switch(e.currentTarget)			{			case spawnLimitSlider:				limitSliderClicked = true;				generateTimer.stop();				//trace(limitSliderClicked);				Mouse.hide();				break;			case spreadDistanceSlider:				spreadSliderClicked = true;				generateTimer.stop();				//trace(spreadSliderClicked);				Mouse.hide();				break;			case circleMaxSlider:				circleMaxSliderClicked = true;				generateTimer.stop();				//trace(circleMaxSliderClicked);				Mouse.hide();				break;			case circleMinSlider:				circleMinSliderClicked = true;				generateTimer.stop();				//trace(circleMinSliderClicked);				Mouse.hide();				break;			case  circleAlphaSlider:				circleAlphaSliderClicked = true;				generateTimer.stop();				//trace(circleMinSliderClicked);				Mouse.hide();				break;			case lineMaxSlider:				lineMaxSliderClicked = true;				generateTimer.stop();				//trace(circleMaxSliderClicked);				Mouse.hide();				break;			case lineMinSlider:				lineMinSliderClicked = true;				generateTimer.stop();				//trace(circleMinSliderClicked);				Mouse.hide();				break;			case  lineIncreaseSlider:				lineIncreaseSliderClicked = true;				generateTimer.stop();				//trace(circleMinSliderClicked);				Mouse.hide();				break;			}						itemTitleText = new TextField();		}//End textHandler		public function textUpHandler(e:Event)		{			Mouse.show();		//	var targetMouse:MovieClip = e.currentTarget();			if (limitSliderClicked /*&& targetMouse == spawnLimitSlider*/)			{				limitSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);							}			if (spreadSliderClicked/* && targetMouse == spreadDistanceSlider*/)			{				spreadSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);			}			if (circleMaxSliderClicked/* && targetMouse == spreadDistanceSlider*/)			{				circleMaxSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);				Mouse.show();			}			if (circleMinSliderClicked/* && targetMouse == spreadDistanceSlider*/)			{				circleMinSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);			}			if (circleAlphaSliderClicked/* && targetMouse == spreadDistanceSlider*/)			{				circleAlphaSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);			}			if (lineMaxSliderClicked)			{				lineMaxSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);				Mouse.show();			}			if (lineMinSliderClicked)			{				lineMinSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);			}			if (lineIncreaseSliderClicked)			{				lineIncreaseSliderClicked = false;				generateTimer.start();				//itemTitleText.text = " ";				stage.removeChild(itemTitleText);			}		}						public function displayText(e:Event = null)		{									if (limitSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.CENTER;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "CircleLimit:" + String(Math.round(totLimitSlider.currentValue)-17);  //Text Input for POPUP Title Box			itemTitleText.x = spawnLimitSlider.x - (itemTitleText.width/2); 			itemTitleText.y = spawnLimitSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}						if (spreadSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.LEFT;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = String(Math.round(spreadSlider.currentValue)) + "px Between Circles";  //Text Input for POPUP Title Box			itemTitleText.x = spreadDistanceSlider.x; 			itemTitleText.y = spreadDistanceSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}						if (circleMaxSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.LEFT;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "CircleMaxSize:" + String(int((circMaxSlider.currentValue) * 10) / 10);  //Text Input for POPUP Title Box			itemTitleText.x = circleMaxSlider.x; 			itemTitleText.y = circleMaxSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}			if (circleMinSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.LEFT;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "CircleMinSize:" + String(int((circMinSlider.currentValue) * 10) / 10);  //Text Input for POPUP Title Box			itemTitleText.x = circleMinSlider.x; 			itemTitleText.y = circleMinSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}			if (circleAlphaSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.LEFT;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "CircleAlpha%" + String(Number(Math.round((circAlphaSlider.percent) * 100)));//Text Input for POPUP Title Box			itemTitleText.x = circleAlphaSlider.x; 			itemTitleText.y = circleAlphaSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}									///LINE						if (lineMaxSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.CENTER;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "LineMaxSize:" + String(int((linemaxSlider.currentValue) * 10) / 10);  //Text Input for POPUP Title Box			itemTitleText.x = lineMaxSlider.x - (itemTitleText.width/2); 			itemTitleText.y = lineMaxSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}			if (lineMinSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.CENTER;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "LineMinSize:" + String(int((lineminSlider.currentValue) * 10) / 10);  //Text Input for POPUP Title Box			itemTitleText.x = lineMinSlider.x - (itemTitleText.width/2); 			itemTitleText.y = lineMinSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}			if (lineIncreaseSliderClicked)			{			stage.addChild(itemTitleText); 			itemTitleText.autoSize = TextFieldAutoSize.CENTER;			//itemTitleText.border = true;			//itemTitleText.background = true;			itemTitleText.backgroundColor = 0xEAEAEA;			itemTitleText.borderColor = 0xC4C4C4;			itemTitleText.text = "FadeFrequency:" + String(int((lineIncSlider.currentValue) * 100) / 100);  //Text Input for POPUP Title Box			itemTitleText.x = lineIncreaseSlider.x - (itemTitleText.width/2); 			itemTitleText.y = lineIncreaseSlider.y + 8;			itemTitleText.antiAliasType = "advanced";				}						itemTitleText.setTextFormat(sliderTextFormat); //Apply Text Formatting				}		public function createBackground():void		{			////////////////Background MC and Declarations/////////			this.addChild(backgroundMC);						//backgroundMC.width = stage.stageWidth;			//backgroundMC.height = stage.stageHeight;			backgroundMC.x = 0;			backgroundMC.y = 0;									backgroundMC.alpha = bgAlpha;						createNewColor();			backgroundMC.graphics.beginFill(backgroundColorThemeArray[themeToBe][newColorID]);			backgroundMC.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);			backgroundMC.graphics.endFill();						updateBackground();			//////////////////////////////////////////////////////		}				public function keyDownHandler(e:KeyboardEvent)		{			if(e.keyCode == 83)			{			//isSpaceDown = true;				generateTimer.stop();				//generateTimer.removeEventListener(TimerEvent.TIMER, createCircle);			}			if (e.keyCode == 76 )			{				if (lineArray.length > 5)				{					isSpawnLines = false;				}			}		}		public function keyUpHandler(e:KeyboardEvent)		{			if(e.keyCode == 83)			{				generateTimer.start();				//generateTimer.addEventListener(TimerEvent.TIMER, createCircle);			}			if (e.keyCode == 76 )			{				isSpawnLines = true;			}		}								private function createNewColor()		{			//colorCounter++;			//trace("Color Counter", + colorCounter)					newColorID = Math.floor(Math.random() * backgroundColorThemeArray[themeToBe].length ); //Pick Color From Array					/*if(colorCounter <= backgroundColorThemeArray[themeToBe].length)			{				newColorID =  colorCounter; //Pick Color From Array				trace(newColorID)			}			if(colorCounter>backgroundColorThemeArray[themeToBe].length)			{							colorCounter=0;				createNewColor()			}*/					}		public function updateBackground()		{			if (backgroundMC.enabled)			{				backgroundMC.graphics.clear();																		//Colors of our gradient in the form of an array					var colors:Array = new Array();					createNewColor();//Create Starting Gradient Color					colors.push(backgroundColorThemeArray[themeToBe][newColorID]);					createNewColor();//Create Ending Gradient Color					colors.push(backgroundColorThemeArray[themeToBe][newColorID]);					//Store the Alpha Values in the form of an array					var alphas:Array = [ 1, 1 ];					//Array of color distribution ratios.					//The value defines percentage of the width where the color is sampled at 100%					var ratios:Array = [ 0, 255 ];					//Create a Matrix instance and assign the Gradient Box					var matr:Matrix = new Matrix();					matr.createGradientBox( stage.width, 500, Math.PI / 2, 0, 0 );					//SpreadMethod will define how the gradient is spread. Note!!! Flash uses CONSTANTS to represent String literals					var sprMethod:String = SpreadMethod.PAD;																	backgroundMC.graphics.beginGradientFill( GradientType.LINEAR, colors, alphas, ratios, matr, sprMethod ); //beginFill(backgroundColorThemeArray[themeToBe][newColorID]);				backgroundMC.graphics.drawRect(0, 0, stage.width*2, stage.height*2);				backgroundMC.graphics.endFill();				//trace(backgroundMC.x);				//trace(backgroundMC.y);															}		}//End updateBackground						//////////////////////COLOR CHANGING/////////////////////////		public function drawBoxes(e:Event = null)		{			addChildAt(colorContainer,0);						var numOfBoxes:int = Circle.getArrayLength();							var boxHeight:Number = 10; //Position of Color Swatches from Top of Screen			var boxSize:Number = 20;  //Width & Height of Color Swatch Blocks			colorBox = new MovieClip();						if (!colorBoxesPlaced)  //If Color Swatches Not Present, Place Them			{				for (var i:int = 0; i < numOfBoxes; i++)				{					colorBox = new MovieClip();					colorContainer.addChild(colorBox);										//BORDER AROUND EACH COLOR SWATCH BLOCK					colorBox.graphics.lineStyle(1.5, 1, .5);					colorBox.graphics.moveTo(0, 0);					colorBox.graphics.lineTo(colorBox.width, 0);					colorBox.graphics.lineTo(colorBox.width, colorBox.height);					colorBox.graphics.lineTo(0, colorBox.height);					colorBox.graphics.lineTo(0, 0);										boxArray.push(colorBox);										//trace("Push Array", + boxArray.length);										colorBox.graphics.beginFill(Circle.circleColorThemeArray[Circle.circleCurrentTheme][i]);					colorBox.graphics.drawRect(stage.stageWidth - 25, boxHeight - 5, boxSize, boxSize);					colorBox.graphics.endFill();					boxHeight = boxHeight + 25				}					colorBoxesPlaced = true;												//boxHeight = boxHeight + 25				this.addChild(themeText);				themeText.autoSize = TextFieldAutoSize.RIGHT;								themeText.selectable = false;				themeText.text = "Theme\n" + String(themeCounter);  //Text Input for POPUP Title Box				//themeText.text += "\nCurrent Theme"; 				themeText.x = stage.stageWidth - themeText.width;//spawnLimitSlider.x - (itemTitleText.width/2); 				themeText.y = boxHeight - 5;//spawnLimitSlider.y + 8;				themeText.antiAliasType = "advanced";									themeText.setTextFormat(themeTextFormat); //Applies Text Format To Text							createBackground()			}						//createBackground() CHANGES COLOR OF BACKGROUND ON MOUSE MOVE?								}				public function switchTheme(e:KeyboardEvent) //Changes Color Scheme		{			if(e.keyCode == 32 || isDrawBoxesClicked)			{				if (colorBoxesPlaced)				{					trace("Theme Counter", + themeCounter)					if(themeCounter < backgroundColorThemeArray.length)					{						themeToBe =  themeCounter; //Pick Color From Array						//trace(newColorID)					}					if(themeCounter>=backgroundColorThemeArray.length)					{									themeCounter=0;						createNewColor()					}					themeCounter++;									//trace("Array Added", + boxArray.length);					for (var i=0; i<boxArray.length; i++)					{								colorContainer.removeChildAt(boxArray.shift());					//circleArray[0].clearLine();					boxArray.shift()									//trace("Array Shifted", + boxArray.length);									}									colorBoxesPlaced = false;					isDrawBoxesClicked = false;										Circle.setTheme(themeToBe);  //Sets Circles Color Scheme					staticColorID = Math.floor( Circle.circleColorThemeArray[themeToBe].length - (Circle.circleColorThemeArray[themeToBe].length - 1))  //Sets Static Line Color 					drawBoxes();					updateBackground();													}			}								}		////////////////END COLOR CHANGING//////////						public function updateFrame(e:Event = null) //updates Mouse Positions & Checks if Mouse Position is Too Close to Spawn Another Circle.		{ 						placementPoint = new Point( mouseX, mouseY);									//lineGoFromPoint = placementPoint;			if (totalArrayLength > 2)			{			mouseDistance = Point.distance(new Point(circleArray[totalArrayLength-1].x, circleArray[totalArrayLength-1].y), placementPoint);			}									if (mouseDistance <= distanceSpread)			{				isClose = true;			}			else			{				isClose = false;			}			//trace(isClose);				/*if(isSpaceDown)		{			isClose = true;		}*/					}				/////////////////CIRCLE SPAWNING & REMOVING/////////////		public function createCircle(e:TimerEvent)		{			if (spawnCounter <= circleSpawnLimit)			{				//trace("Create Circle");												if (spawnCounter > 0)				{					totalArrayLength = circleArray.length;				}							updateFrame()				if (!isClose && isSpawnCircles) 				{										Circle = new circleSpawner(themeToBe, staticColorID, circleMax, circleMin, circleAlpha);					this.addChild(Circle);					Circle.x = placementPoint.x;					Circle.y = placementPoint.y;					circleAdded(Circle);					// trace("CIRCLE INDEX", + Circle.getCircleIndex());										//updateFrame();					if (spawnCounter > 0)					{						var firstTargetCircle:MovieClip = circleArray[totalArrayLength];																	oldPlacementPoint = Circle.globalToLocal(new Point(0, 0));																		if (spawnCounter > 1)						{						var secondTargetCircle:MovieClip = circleArray[totalArrayLength - 1];													if (secondTargetCircle.enabled)							{									//trace(secondTargetCircle.enabled);								oldPlacementPoint = Circle.globalToLocal(new Point(secondTargetCircle.x, secondTargetCircle.y)); 							}						}						else if(spawnCounter)						{							//oldPlacementPoint = Circle.globalToLocal(new Point(firstTargetCircle.x, firstTargetCircle.y)); 						}					}									}								if (!isClose && isSpawnLines) 				{									var offset:Point = Circle.globalToLocal(new Point(mouseX, mouseY));					if (circleArray.length <= circleSpawnLimit && !isClose)						{						Line = new lineSpawner( oldPlacementPoint, offset, themeToBe, staticColorID, lineSizeMax, lineSizeMin, lineIncrease);						this.addChildAt(Line, Circle.numChildren); //Adds the Line Behind the Circle						Line.x = placementPoint.x;						Line.y = placementPoint.y;						lineAdded(Line);																		// trace("CIRCLE INDEX", + Circle.getCircleIndex());					}				}				spawnCounter++;//Updates amount of Spawn has run			}			if (spawnCounter > circleSpawnLimit)			{				spawnCounter--;			}						if (this.numChildren+8 > circleSpawnLimit /* & !isClose*/)			{				removeCircle();				if (isSpawnLines)				{					removeLine();				}			}		}				public function circleAdded(e:MovieClip)		{			var circleToPush:MovieClip = e;						//circleToPush.createLines();						drawBoxes();						circleArray.push(circleToPush);			//trace("Circle Array Length: ", +circleArray.length)						if (circleArray.length >= circleSpawnLimit )			{			//removalTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeCircle);			//removalTimer.start();			removeCircle();			}		}		public function removeCircle(e:TimerEvent= null)		{						this.removeChild(circleArray.shift());  //Removes Circle in Very Front of Array			//this.circleArray.shift();					}		//////////////////END CIRCLE FUNCTIONS///////////////////				public function lineAdded(e:MovieClip)		{			var lineToPush:MovieClip = e;						lineArray.push(lineToPush);						drawBoxes();												//trace("Line Array Length: ", +lineArray.length)						if (lineArray.length >= circleSpawnLimit )			{			//removalTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeLine);			//removalTimer.start();			removeLine();			}		}//end lineAdded				public function removeLine(e:TimerEvent= null)		{			this.removeChild(lineArray.shift());  //Removes Circle in Very Front of Array						//lineArray.shift();					}											}//End Class}//End Package